# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
  pull_request:
    branches:
      - master
  workflow_dispatch:
    # When running manually, allow users to customize the run:
    inputs:
      check-manual:
        description: 'check the manual'
        required: false
        default: 'true'
      check-vignettes:
        description: 'check the vignettes'
        required: false
        default: 'true'
      run-tests:
        description: 'run the tests'
        required: false
        default: 'true'
      check-examples:
        description: 'check the examples'
        required: false
        default: 'true'
      check-windows:
        description: 'Test build on Windows'
        required: false
        default: 'false'
      check-mac:
        description: 'Test build on MacOS'
        required: false
        default: 'false'
      check-r-release-version-on-ubuntu:
        description: 'Check on Ubuntu using the release version of R'
        required: false
        default: 'false'
      check-r-devel-version-on-ubuntu:
        description: 'Check on Ubuntu using the development version of R'
        required: false
        default: 'false'

name: R-CMD-check

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        name: Conditional Build Matrix
        uses: JoshuaTheMiller/conditional-build-matrix@0.0.1
        with:
          inputFile: '.github/workflows/matrix_includes_for_R-CMD-check.json'
          filter:
            '[?contains(runOnEvent, `${{ github.event_name }}`)
               || (contains(os, `"windows"`) && `${{ github.event.inputs.check-windows }}` == `true`)
               || (contains(os, `"macOS"`) && `${{ github.event.inputs.check-mac }}` == `true`)
               || (contains(os, `"ubuntu"`)
                   && ((contains(r, `"release"`) && `${{ github.event.inputs.check-r-release-version-on-ubuntu }}` == `true`)
                       || (contains(r, `"devel"`) && `${{ github.event.inputs.check-r-devel-version-on-ubuntu }}` == `true`)))]'

  # For debugging:
  display_matrix:
    needs: matrix_prep
    runs-on: ubuntu-latest
    steps:
    - name: Report Configuration
      env:
        MATRIX_CONTEXT: ${{ needs.matrix_prep.outputs.matrix }}
      run: |
        echo "matrix: $MATRIX_CONTEXT"

  R-CMD-check:
    name: ${{ matrix.os }} (${{ matrix.r }})
    needs: matrix_prep
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true # affects behavior of the "remotes" package's install commands
      RSPM: ${{ matrix.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.r }}

      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

        # Under macOS, we were able to just do this one-step process
        # for installing LaTeX and the extra needed packages, but
        # trying this under Ubuntu yields the following error:
        #
        #    Warning: LaTeX errors when creating PDF version.
        #    This typically indicates Rd problems.
        #    * checking PDF version of manual without hyperrefs or index ... ERROR
        #    Error: Re-running with no redirection of stdout/stderr.
        #    Hmm ... looks like a package
        #    Error in texi2dvi(file = file, pdf = TRUE, clean = clean, quiet = quiet,  : 
        #      pdflatex is not available
        #    Error in texi2dvi(file = file, pdf = TRUE, clean = clean, quiet = quiet,  : 
        #      pdflatex is not available
        #    Error in running tools::texi2pdf()
        #
        # Using the setup-tinytex action followed by a separate step
        # using tlmgr on the command line to install the extra
        # packages seems to work.
        ## run: |
        ##   install.packages('tinytex')
        ##   tinytex::install_tinytex()
        ##   # Install a few LaTeX packages needed by the vignette not included
        ##   # in tinytex:
        ##   tinytex::tlmgr_install(c('siunitx', 'babel-english'))
        ## shell: Rscript {0}

      - name: Maybe install TinyTex

        # TinyTex must be installed iff we are checking either the
        # manual or the vignettes.  We always build and check the
        # manual if the workflow is triggered automatically (that is,
        # if the triggering event ISN'T workflow_dispatch).
        # Otherwise, if the workflow is dispatched manually, we need
        # to install TinyTex only if user specified either the "check
        # the manual" or "check the vignettes".

        if: ${{github.event_name != 'workflow_dispatch' ||
               github.event.inputs.check-vignettes == 'true' ||
               github.event.inputs.check-manual == 'true'}}
        uses: r-lib/actions/setup-tinytex@v1               

      - if: ${{github.event_name != 'workflow_dispatch' ||
               github.event.inputs.check-vignettes == 'true' ||
               github.event.inputs.check-manual == 'true'}}
        run: |
          # Install a few LaTeX packages needed by the vignette not included
          # in tinytex:
          tlmgr install siunitx babel-english

      - name: Check package
        env:
          # Not sure why or even if this is necessary:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          if ('${{ github.event_name }}' == 'workflow_dispatch') {
            build_args_value <- c()
            args_value <- c('--as-cran')
            if (as.logical('${{ github.event.inputs.check-manual }}') == FALSE) {
              build_args_value <- append(build_args_value, '--no-manual')
              args_value <- append(args_value, '--no-manual')
            }
            if (as.logical('${{ github.event.inputs.check-vignettes }}') == FALSE) {
              build_args_value <- append(build_args_value, '--no-build-vignettes')
              args_value <- append(args_value, '--ignore-vignettes')
            }
            if (as.logical('${{ github.event.inputs.run-tests }}') == FALSE) {
              args_value <- append(args_value, '--no-tests')
            }
            if (as.logical('${{ github.event.inputs.check-examples }}') == FALSE) {
              args_value <- append(args_value, '--no-examples')
            }
          } else {
            build_args_value <- c('--no-build-vignettes')
            args_value <- c('--as-cran', '--ignore-vignettes')
          }
          cat("Running rcmdcheck with",
                "\n  args =", args_value,
                "\n  build_args =", build_args_value,
                "\n  error_on = 'error', and",
                "\n  check_dir = 'check'\n")
          rcmdcheck::rcmdcheck(args = args_value,
                               build_args = build_args_value,
                               error_on = "error",
                               check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.r }}-results
          path: check
